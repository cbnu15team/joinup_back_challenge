package com.example.joinup.challengeboard.service;

import com.example.joinup.challengeboard.entity.ChallengeBoard;
import com.example.joinup.challengeboard.repository.ChallengeBoardRepository;
import com.example.joinup.user.entity.User;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
public class ChallengeBoardService {

    private final ChallengeBoardRepository challengeBoardRepository;

    public ChallengeBoardService(ChallengeBoardRepository repository) {
        this.challengeBoardRepository = repository;
    }

    // 상세글 생성
    public ChallengeBoard createChallengeBoard(ChallengeBoard board, User user) {
        board.setUserId(user.getUserId()); // 작성자 설정
        board.setViewCount(0); // 방문자 수 초기화
        return challengeBoardRepository.save(board);
    }

    // 상세글 조회 (ID로 조회)
    public ChallengeBoard getChallengeBoardById(Integer boardId) {
        return challengeBoardRepository.findById(boardId)
                .orElseThrow(() -> new IllegalArgumentException("해당 상세글을 찾을 수 없습니다."));
    }

    // 모든 상세글 조회
    public List<ChallengeBoard> getAllChallengeBoards() {
        return challengeBoardRepository.findAll();
    }

    // 상세글 수정
    public ChallengeBoard updateChallengeBoard(Integer boardId, ChallengeBoard updatedBoard, User currentUser) {
        ChallengeBoard existingBoard = challengeBoardRepository.findById(boardId)
                .orElseThrow(() -> new IllegalArgumentException("해당 상세글을 찾을 수 없습니다."));

        // 작성자 검증
        if (!existingBoard.getUserId().equals(currentUser.getUserId())) {
            throw new SecurityException("작성자만 수정할 수 있습니다.");
        }

        // 데이터 업데이트
        existingBoard.setTitle(updatedBoard.getTitle());
        existingBoard.setContent(updatedBoard.getContent());
        return challengeBoardRepository.save(existingBoard);
    }

    // 상세글 삭제
    public void deleteChallengeBoard(Integer boardId, User currentUser) {
        ChallengeBoard existingBoard = challengeBoardRepository.findById(boardId)
                .orElseThrow(() -> new IllegalArgumentException("해당 상세글을 찾을 수 없습니다."));

        // 작성자 검증
        if (!existingBoard.getUserId().equals(currentUser.getUserId())) {
            throw new SecurityException("작성자만 삭제할 수 있습니다.");
        }

        challengeBoardRepository.delete(existingBoard);
    }

    // 방문자 수 증가
    public void incrementVisitorCount(Integer boardId) {
        ChallengeBoard board = challengeBoardRepository.findById(boardId)
                .orElseThrow(() -> new IllegalArgumentException("해당 상세글을 찾을 수 없습니다."));
        board.setViewCount(board.getViewCount() + 1);
        challengeBoardRepository.save(board);
    }
}
